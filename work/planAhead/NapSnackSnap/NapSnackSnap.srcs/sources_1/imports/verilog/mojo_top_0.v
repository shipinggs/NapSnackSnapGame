/*
   This file was generated automatically by the Mojo IDE version B1.2.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input [2:0] gameselectbuttons,
    input [2:0] playeronebuttons,
    input [2:0] playertwobuttons,
    input [2:0] playerthreebuttons,
    output reg [2:0] centralleds,
    output reg [7:0] centralsevensegzero,
    output reg [7:0] centralsevensegone,
    output reg [7:0] centralsevensegtwo,
    output reg [7:0] playeronescore,
    output reg [7:0] playertwoscore,
    output reg [7:0] playerthreescore,
    output reg [5:0] playerleds
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_bconeone_out;
  reg [1-1:0] M_bconeone_in;
  button_conditioner_2 bconeone (
    .clk(clk),
    .in(M_bconeone_in),
    .out(M_bconeone_out)
  );
  wire [1-1:0] M_bconetwo_out;
  reg [1-1:0] M_bconetwo_in;
  button_conditioner_2 bconetwo (
    .clk(clk),
    .in(M_bconetwo_in),
    .out(M_bconetwo_out)
  );
  wire [1-1:0] M_bconethree_out;
  reg [1-1:0] M_bconethree_in;
  button_conditioner_2 bconethree (
    .clk(clk),
    .in(M_bconethree_in),
    .out(M_bconethree_out)
  );
  wire [1-1:0] M_bctwoone_out;
  reg [1-1:0] M_bctwoone_in;
  button_conditioner_2 bctwoone (
    .clk(clk),
    .in(M_bctwoone_in),
    .out(M_bctwoone_out)
  );
  wire [1-1:0] M_bctwotwo_out;
  reg [1-1:0] M_bctwotwo_in;
  button_conditioner_2 bctwotwo (
    .clk(clk),
    .in(M_bctwotwo_in),
    .out(M_bctwotwo_out)
  );
  wire [1-1:0] M_bctwothree_out;
  reg [1-1:0] M_bctwothree_in;
  button_conditioner_2 bctwothree (
    .clk(clk),
    .in(M_bctwothree_in),
    .out(M_bctwothree_out)
  );
  wire [1-1:0] M_bcthreeone_out;
  reg [1-1:0] M_bcthreeone_in;
  button_conditioner_2 bcthreeone (
    .clk(clk),
    .in(M_bcthreeone_in),
    .out(M_bcthreeone_out)
  );
  wire [1-1:0] M_bcthreetwo_out;
  reg [1-1:0] M_bcthreetwo_in;
  button_conditioner_2 bcthreetwo (
    .clk(clk),
    .in(M_bcthreetwo_in),
    .out(M_bcthreetwo_out)
  );
  wire [1-1:0] M_bcthreethree_out;
  reg [1-1:0] M_bcthreethree_in;
  button_conditioner_2 bcthreethree (
    .clk(clk),
    .in(M_bcthreethree_in),
    .out(M_bcthreethree_out)
  );
  wire [1-1:0] M_bcgameselectone_out;
  reg [1-1:0] M_bcgameselectone_in;
  button_conditioner_2 bcgameselectone (
    .clk(clk),
    .in(M_bcgameselectone_in),
    .out(M_bcgameselectone_out)
  );
  wire [1-1:0] M_bcgameselecttwo_out;
  reg [1-1:0] M_bcgameselecttwo_in;
  button_conditioner_2 bcgameselecttwo (
    .clk(clk),
    .in(M_bcgameselecttwo_in),
    .out(M_bcgameselecttwo_out)
  );
  wire [1-1:0] M_bcgameselectthree_out;
  reg [1-1:0] M_bcgameselectthree_in;
  button_conditioner_2 bcgameselectthree (
    .clk(clk),
    .in(M_bcgameselectthree_in),
    .out(M_bcgameselectthree_out)
  );
  wire [1-1:0] M_edoneone_out;
  reg [1-1:0] M_edoneone_in;
  edge_detector_14 edoneone (
    .clk(clk),
    .in(M_edoneone_in),
    .out(M_edoneone_out)
  );
  wire [1-1:0] M_edonetwo_out;
  reg [1-1:0] M_edonetwo_in;
  edge_detector_14 edonetwo (
    .clk(clk),
    .in(M_edonetwo_in),
    .out(M_edonetwo_out)
  );
  wire [1-1:0] M_edonethree_out;
  reg [1-1:0] M_edonethree_in;
  edge_detector_14 edonethree (
    .clk(clk),
    .in(M_edonethree_in),
    .out(M_edonethree_out)
  );
  wire [1-1:0] M_edtwoone_out;
  reg [1-1:0] M_edtwoone_in;
  edge_detector_14 edtwoone (
    .clk(clk),
    .in(M_edtwoone_in),
    .out(M_edtwoone_out)
  );
  wire [1-1:0] M_edtwotwo_out;
  reg [1-1:0] M_edtwotwo_in;
  edge_detector_14 edtwotwo (
    .clk(clk),
    .in(M_edtwotwo_in),
    .out(M_edtwotwo_out)
  );
  wire [1-1:0] M_edtwothree_out;
  reg [1-1:0] M_edtwothree_in;
  edge_detector_14 edtwothree (
    .clk(clk),
    .in(M_edtwothree_in),
    .out(M_edtwothree_out)
  );
  wire [1-1:0] M_edthreeone_out;
  reg [1-1:0] M_edthreeone_in;
  edge_detector_14 edthreeone (
    .clk(clk),
    .in(M_edthreeone_in),
    .out(M_edthreeone_out)
  );
  wire [1-1:0] M_edthreetwo_out;
  reg [1-1:0] M_edthreetwo_in;
  edge_detector_14 edthreetwo (
    .clk(clk),
    .in(M_edthreetwo_in),
    .out(M_edthreetwo_out)
  );
  wire [1-1:0] M_edthreethree_out;
  reg [1-1:0] M_edthreethree_in;
  edge_detector_14 edthreethree (
    .clk(clk),
    .in(M_edthreethree_in),
    .out(M_edthreethree_out)
  );
  wire [1-1:0] M_edgameselectone_out;
  reg [1-1:0] M_edgameselectone_in;
  edge_detector_14 edgameselectone (
    .clk(clk),
    .in(M_edgameselectone_in),
    .out(M_edgameselectone_out)
  );
  wire [1-1:0] M_edgameselecttwo_out;
  reg [1-1:0] M_edgameselecttwo_in;
  edge_detector_14 edgameselecttwo (
    .clk(clk),
    .in(M_edgameselecttwo_in),
    .out(M_edgameselecttwo_out)
  );
  wire [1-1:0] M_edgameselectthree_out;
  reg [1-1:0] M_edgameselectthree_in;
  edge_detector_14 edgameselectthree (
    .clk(clk),
    .in(M_edgameselectthree_in),
    .out(M_edgameselectthree_out)
  );
  
  localparam IDLE_gameselectstate = 3'd0;
  localparam NAP_gameselectstate = 3'd1;
  localparam SNACK_gameselectstate = 3'd2;
  localparam SNAP_gameselectstate = 3'd3;
  
  reg [2:0] M_gameselectstate_d, M_gameselectstate_q = IDLE_gameselectstate;
  wire [6-1:0] M_gameonemanager_alufn;
  wire [8-1:0] M_gameonemanager_alua;
  wire [8-1:0] M_gameonemanager_alub;
  wire [8-1:0] M_gameonemanager_centralsevenseg;
  wire [6-1:0] M_gameonemanager_playerleds;
  reg [1-1:0] M_gameonemanager_start;
  reg [8-1:0] M_gameonemanager_aluout;
  reg [3-1:0] M_gameonemanager_playeronebuttons;
  reg [3-1:0] M_gameonemanager_playertwobuttons;
  reg [3-1:0] M_gameonemanager_playerthreebuttons;
  gameonemanager_26 gameonemanager (
    .clk(clk),
    .rst(rst),
    .start(M_gameonemanager_start),
    .aluout(M_gameonemanager_aluout),
    .playeronebuttons(M_gameonemanager_playeronebuttons),
    .playertwobuttons(M_gameonemanager_playertwobuttons),
    .playerthreebuttons(M_gameonemanager_playerthreebuttons),
    .alufn(M_gameonemanager_alufn),
    .alua(M_gameonemanager_alua),
    .alub(M_gameonemanager_alub),
    .centralsevenseg(M_gameonemanager_centralsevenseg),
    .playerleds(M_gameonemanager_playerleds)
  );
  wire [6-1:0] M_gametwomanager_alufn;
  wire [8-1:0] M_gametwomanager_alua;
  wire [8-1:0] M_gametwomanager_alub;
  wire [8-1:0] M_gametwomanager_countdownvalue;
  wire [3-1:0] M_gametwomanager_leddisplay;
  wire [8-1:0] M_gametwomanager_playeronescore;
  wire [8-1:0] M_gametwomanager_playertwoscore;
  wire [8-1:0] M_gametwomanager_playerthreescore;
  reg [1-1:0] M_gametwomanager_start;
  reg [8-1:0] M_gametwomanager_aluout;
  reg [3-1:0] M_gametwomanager_playerone;
  reg [3-1:0] M_gametwomanager_playertwo;
  reg [3-1:0] M_gametwomanager_playerthree;
  gametwomanager_27 gametwomanager (
    .clk(clk),
    .rst(rst),
    .start(M_gametwomanager_start),
    .aluout(M_gametwomanager_aluout),
    .playerone(M_gametwomanager_playerone),
    .playertwo(M_gametwomanager_playertwo),
    .playerthree(M_gametwomanager_playerthree),
    .alufn(M_gametwomanager_alufn),
    .alua(M_gametwomanager_alua),
    .alub(M_gametwomanager_alub),
    .countdownvalue(M_gametwomanager_countdownvalue),
    .leddisplay(M_gametwomanager_leddisplay),
    .playeronescore(M_gametwomanager_playeronescore),
    .playertwoscore(M_gametwomanager_playertwoscore),
    .playerthreescore(M_gametwomanager_playerthreescore)
  );
  wire [6-1:0] M_gamethreemanager_alufn;
  wire [8-1:0] M_gamethreemanager_alua;
  wire [8-1:0] M_gamethreemanager_alub;
  wire [8-1:0] M_gamethreemanager_primeornot;
  wire [8-1:0] M_gamethreemanager_playeronescore;
  wire [8-1:0] M_gamethreemanager_playertwoscore;
  wire [8-1:0] M_gamethreemanager_playerthreescore;
  reg [1-1:0] M_gamethreemanager_start;
  reg [8-1:0] M_gamethreemanager_aluout;
  reg [2-1:0] M_gamethreemanager_playerone;
  reg [2-1:0] M_gamethreemanager_playertwo;
  reg [2-1:0] M_gamethreemanager_playerthree;
  gamethreemanager_28 gamethreemanager (
    .clk(clk),
    .rst(rst),
    .start(M_gamethreemanager_start),
    .aluout(M_gamethreemanager_aluout),
    .playerone(M_gamethreemanager_playerone),
    .playertwo(M_gamethreemanager_playertwo),
    .playerthree(M_gamethreemanager_playerthree),
    .alufn(M_gamethreemanager_alufn),
    .alua(M_gamethreemanager_alua),
    .alub(M_gamethreemanager_alub),
    .primeornot(M_gamethreemanager_primeornot),
    .playeronescore(M_gamethreemanager_playeronescore),
    .playertwoscore(M_gamethreemanager_playertwoscore),
    .playerthreescore(M_gamethreemanager_playerthreescore)
  );
  
  wire [8-1:0] M_alu8bit_aluout;
  reg [6-1:0] M_alu8bit_alufn;
  reg [8-1:0] M_alu8bit_a;
  reg [8-1:0] M_alu8bit_b;
  alu8bit_29 alu8bit (
    .alufn(M_alu8bit_alufn),
    .a(M_alu8bit_a),
    .b(M_alu8bit_b),
    .aluout(M_alu8bit_aluout)
  );
  
  wire [4-1:0] M_decimaltosevenseg_out2;
  wire [4-1:0] M_decimaltosevenseg_out1;
  wire [4-1:0] M_decimaltosevenseg_out0;
  reg [8-1:0] M_decimaltosevenseg_a;
  decimaltosevenseg_30 decimaltosevenseg (
    .a(M_decimaltosevenseg_a),
    .out2(M_decimaltosevenseg_out2),
    .out1(M_decimaltosevenseg_out1),
    .out0(M_decimaltosevenseg_out0)
  );
  
  wire [4-1:0] M_playeronedecimaltosevenseg_out2;
  wire [4-1:0] M_playeronedecimaltosevenseg_out1;
  wire [4-1:0] M_playeronedecimaltosevenseg_out0;
  reg [8-1:0] M_playeronedecimaltosevenseg_a;
  decimaltosevenseg_30 playeronedecimaltosevenseg (
    .a(M_playeronedecimaltosevenseg_a),
    .out2(M_playeronedecimaltosevenseg_out2),
    .out1(M_playeronedecimaltosevenseg_out1),
    .out0(M_playeronedecimaltosevenseg_out0)
  );
  
  wire [4-1:0] M_playertwodecimaltosevenseg_out2;
  wire [4-1:0] M_playertwodecimaltosevenseg_out1;
  wire [4-1:0] M_playertwodecimaltosevenseg_out0;
  reg [8-1:0] M_playertwodecimaltosevenseg_a;
  decimaltosevenseg_30 playertwodecimaltosevenseg (
    .a(M_playertwodecimaltosevenseg_a),
    .out2(M_playertwodecimaltosevenseg_out2),
    .out1(M_playertwodecimaltosevenseg_out1),
    .out0(M_playertwodecimaltosevenseg_out0)
  );
  
  wire [4-1:0] M_playerthreedecimaltosevenseg_out2;
  wire [4-1:0] M_playerthreedecimaltosevenseg_out1;
  wire [4-1:0] M_playerthreedecimaltosevenseg_out0;
  reg [8-1:0] M_playerthreedecimaltosevenseg_a;
  decimaltosevenseg_30 playerthreedecimaltosevenseg (
    .a(M_playerthreedecimaltosevenseg_a),
    .out2(M_playerthreedecimaltosevenseg_out2),
    .out1(M_playerthreedecimaltosevenseg_out1),
    .out0(M_playerthreedecimaltosevenseg_out0)
  );
  
  wire [7-1:0] M_sevensegzero_segs;
  reg [4-1:0] M_sevensegzero_char;
  sevenseg_34 sevensegzero (
    .char(M_sevensegzero_char),
    .segs(M_sevensegzero_segs)
  );
  
  wire [7-1:0] M_sevensegone_segs;
  reg [4-1:0] M_sevensegone_char;
  sevenseg_34 sevensegone (
    .char(M_sevensegone_char),
    .segs(M_sevensegone_segs)
  );
  
  wire [7-1:0] M_sevensegtwo_segs;
  reg [4-1:0] M_sevensegtwo_char;
  sevenseg_34 sevensegtwo (
    .char(M_sevensegtwo_char),
    .segs(M_sevensegtwo_segs)
  );
  
  wire [7-1:0] M_playeronescoresevenseg_segs;
  reg [4-1:0] M_playeronescoresevenseg_char;
  sevenseg_34 playeronescoresevenseg (
    .char(M_playeronescoresevenseg_char),
    .segs(M_playeronescoresevenseg_segs)
  );
  
  wire [7-1:0] M_playertwoscoresevenseg_segs;
  reg [4-1:0] M_playertwoscoresevenseg_char;
  sevenseg_34 playertwoscoresevenseg (
    .char(M_playertwoscoresevenseg_char),
    .segs(M_playertwoscoresevenseg_segs)
  );
  
  wire [7-1:0] M_playerthreescoresevenseg_segs;
  reg [4-1:0] M_playerthreescoresevenseg_char;
  sevenseg_34 playerthreescoresevenseg (
    .char(M_playerthreescoresevenseg_char),
    .segs(M_playerthreescoresevenseg_segs)
  );
  
  always @* begin
    M_gameselectstate_d = M_gameselectstate_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    centralleds = 3'h0;
    M_alu8bit_alufn = 1'h0;
    M_alu8bit_a = 1'h0;
    M_alu8bit_b = 1'h0;
    M_gameonemanager_aluout = M_alu8bit_aluout;
    M_gametwomanager_aluout = M_alu8bit_aluout;
    M_gamethreemanager_aluout = M_alu8bit_aluout;
    M_gameonemanager_start = 1'h0;
    M_gametwomanager_start = 1'h0;
    M_gamethreemanager_start = 1'h0;
    M_bconeone_in = playeronebuttons[0+0-:1];
    M_edoneone_in = M_bconeone_out;
    M_gametwomanager_playerone[0+0-:1] = M_edoneone_out;
    M_gameonemanager_playeronebuttons[0+0-:1] = M_edoneone_out;
    M_gamethreemanager_playerone[0+0-:1] = M_edoneone_out;
    M_bconetwo_in = playeronebuttons[1+0-:1];
    M_edonetwo_in = M_bconetwo_out;
    M_gametwomanager_playerone[1+0-:1] = M_edonetwo_out;
    M_gameonemanager_playeronebuttons[1+0-:1] = M_edonetwo_out;
    M_bconethree_in = playeronebuttons[2+0-:1];
    M_edonethree_in = M_bconethree_out;
    M_gametwomanager_playerone[2+0-:1] = M_edonethree_out;
    M_gameonemanager_playeronebuttons[2+0-:1] = M_edonethree_out;
    M_gamethreemanager_playerone[1+0-:1] = M_edonethree_out;
    M_bctwoone_in = playertwobuttons[0+0-:1];
    M_edtwoone_in = M_bctwoone_out;
    M_gametwomanager_playertwo[0+0-:1] = M_edtwoone_out;
    M_gameonemanager_playertwobuttons[0+0-:1] = M_edtwoone_out;
    M_gamethreemanager_playertwo[0+0-:1] = M_edtwoone_out;
    M_bctwotwo_in = playertwobuttons[1+0-:1];
    M_edtwotwo_in = M_bctwotwo_out;
    M_gametwomanager_playertwo[1+0-:1] = M_edtwotwo_out;
    M_gameonemanager_playertwobuttons[1+0-:1] = M_edtwotwo_out;
    M_bctwothree_in = playertwobuttons[2+0-:1];
    M_edtwothree_in = M_bctwothree_out;
    M_gametwomanager_playertwo[2+0-:1] = M_edtwothree_out;
    M_gameonemanager_playertwobuttons[2+0-:1] = M_edtwothree_out;
    M_gamethreemanager_playertwo[1+0-:1] = M_edtwothree_out;
    M_bcthreeone_in = playerthreebuttons[0+0-:1];
    M_edthreeone_in = M_bcthreeone_out;
    M_gametwomanager_playerthree[0+0-:1] = M_edthreeone_out;
    M_gameonemanager_playerthreebuttons[0+0-:1] = M_edthreeone_out;
    M_gamethreemanager_playerthree[0+0-:1] = M_edthreeone_out;
    M_bcthreetwo_in = playerthreebuttons[1+0-:1];
    M_edthreetwo_in = M_bcthreetwo_out;
    M_gametwomanager_playerthree[1+0-:1] = M_edthreetwo_out;
    M_gameonemanager_playerthreebuttons[1+0-:1] = M_edthreetwo_out;
    M_bcthreethree_in = playerthreebuttons[2+0-:1];
    M_edthreethree_in = M_bcthreethree_out;
    M_gametwomanager_playerthree[2+0-:1] = M_edthreethree_out;
    M_gameonemanager_playerthreebuttons[2+0-:1] = M_edthreethree_out;
    M_gamethreemanager_playerthree[1+0-:1] = M_edthreethree_out;
    M_bcgameselectone_in = gameselectbuttons[0+0-:1];
    M_edgameselectone_in = M_bcgameselectone_out;
    M_bcgameselecttwo_in = gameselectbuttons[1+0-:1];
    M_edgameselecttwo_in = M_bcgameselecttwo_out;
    M_bcgameselectthree_in = gameselectbuttons[2+0-:1];
    M_edgameselectthree_in = M_bcgameselectthree_out;
    M_decimaltosevenseg_a = 1'h0;
    M_playeronedecimaltosevenseg_a = 1'h0;
    M_playertwodecimaltosevenseg_a = 1'h0;
    M_playerthreedecimaltosevenseg_a = 1'h0;
    playerleds = 6'h00;
    if (M_edgameselectone_out) begin
      M_gameselectstate_d = NAP_gameselectstate;
      M_gameonemanager_start = 1'h1;
    end
    if (M_edgameselectthree_out) begin
      M_gameselectstate_d = SNACK_gameselectstate;
      M_gametwomanager_start = 1'h1;
    end
    if (M_edgameselecttwo_out) begin
      M_gameselectstate_d = SNAP_gameselectstate;
      M_gamethreemanager_start = 1'h1;
    end
    
    case (M_gameselectstate_q)
      NAP_gameselectstate: begin
        M_alu8bit_alufn = M_gameonemanager_alufn;
        M_alu8bit_a = M_gameonemanager_alua;
        M_alu8bit_b = M_gameonemanager_alub;
        playerleds[0+1-:2] = M_gameonemanager_playerleds[0+1-:2];
        playerleds[2+1-:2] = M_gameonemanager_playerleds[2+1-:2];
        playerleds[4+1-:2] = M_gameonemanager_playerleds[4+1-:2];
        M_decimaltosevenseg_a = M_gameonemanager_centralsevenseg;
      end
      SNACK_gameselectstate: begin
        M_alu8bit_alufn = M_gametwomanager_alufn;
        M_alu8bit_a = M_gametwomanager_alua;
        M_alu8bit_b = M_gametwomanager_alub;
        M_playerthreedecimaltosevenseg_a = M_gametwomanager_playerthreescore;
        M_playertwodecimaltosevenseg_a = M_gametwomanager_playertwoscore;
        M_playeronedecimaltosevenseg_a = M_gametwomanager_playeronescore;
        M_decimaltosevenseg_a = M_gametwomanager_countdownvalue;
        centralleds = M_gametwomanager_leddisplay;
      end
      SNAP_gameselectstate: begin
        M_alu8bit_alufn = M_gamethreemanager_alufn;
        M_alu8bit_a = M_gamethreemanager_alua;
        M_alu8bit_b = M_gamethreemanager_alub;
        M_playerthreedecimaltosevenseg_a = M_gamethreemanager_playerthreescore;
        M_playertwodecimaltosevenseg_a = M_gamethreemanager_playertwoscore;
        M_playeronedecimaltosevenseg_a = M_gamethreemanager_playeronescore;
        M_decimaltosevenseg_a = M_gamethreemanager_primeornot;
      end
    endcase
    M_sevensegzero_char = M_decimaltosevenseg_out0;
    M_sevensegone_char = M_decimaltosevenseg_out1;
    M_sevensegtwo_char = M_decimaltosevenseg_out2;
    M_playeronescoresevenseg_char = M_playeronedecimaltosevenseg_out0;
    M_playertwoscoresevenseg_char = M_playertwodecimaltosevenseg_out0;
    M_playerthreescoresevenseg_char = M_playerthreedecimaltosevenseg_out0;
    centralsevensegzero = ~M_sevensegzero_segs;
    centralsevensegone = ~M_sevensegone_segs;
    centralsevensegtwo = ~M_sevensegtwo_segs;
    playeronescore = ~M_playeronescoresevenseg_segs;
    playertwoscore = ~M_playertwoscoresevenseg_segs;
    playerthreescore = ~M_playerthreescoresevenseg_segs;
    if (M_gameselectstate_q == NAP_gameselectstate) begin
      playeronescore = 8'hff;
      playertwoscore = 8'hff;
      playerthreescore = 8'hff;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_gameselectstate_q <= 1'h0;
    end else begin
      M_gameselectstate_q <= M_gameselectstate_d;
    end
  end
  
endmodule
