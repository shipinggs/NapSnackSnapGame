/*
   This file was generated automatically by the Mojo IDE version B1.2.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gamethreemanager_29 (
    input clk,
    input rst,
    input start,
    input [7:0] aluout,
    output reg [5:0] alufn,
    output reg [7:0] alua,
    output reg [7:0] alub,
    output reg [7:0] primeornot,
    input [1:0] playerone,
    input [1:0] playertwo,
    input [1:0] playerthree,
    output reg [7:0] playeronescore,
    output reg [7:0] playertwoscore,
    output reg [7:0] playerthreescore
  );
  
  
  
  wire [1-1:0] M_countdowntimer2_timerdone;
  wire [3-1:0] M_countdowntimer2_value;
  reg [1-1:0] M_countdowntimer2_start;
  countdowntimer_47 countdowntimer2 (
    .clk(clk),
    .rst(rst),
    .start(M_countdowntimer2_start),
    .timerdone(M_countdowntimer2_timerdone),
    .value(M_countdowntimer2_value)
  );
  wire [1-1:0] M_inputcountdowntimer2_timerdone;
  wire [4-1:0] M_inputcountdowntimer2_value;
  reg [1-1:0] M_inputcountdowntimer2_start;
  inputcountdowntimer_50 inputcountdowntimer2 (
    .clk(clk),
    .rst(rst),
    .start(M_inputcountdowntimer2_start),
    .timerdone(M_inputcountdowntimer2_timerdone),
    .value(M_inputcountdowntimer2_value)
  );
  localparam STARTCOUNTDOWN_gamethreestate = 2'd0;
  localparam USERINPUT_gamethreestate = 2'd1;
  localparam SHOWSCORE_gamethreestate = 2'd2;
  
  reg [1:0] M_gamethreestate_d, M_gamethreestate_q = STARTCOUNTDOWN_gamethreestate;
  wire [4-1:0] M_roundcounter2_value;
  reg [1-1:0] M_roundcounter2_upcounter;
  reg [1-1:0] M_roundcounter2_start;
  conditionalcounter_62 roundcounter2 (
    .clk(clk),
    .rst(rst),
    .upcounter(M_roundcounter2_upcounter),
    .start(M_roundcounter2_start),
    .value(M_roundcounter2_value)
  );
  wire [5-1:0] M_gamethreeplayerone_playerinput;
  wire [8-1:0] M_gamethreeplayerone_playerscore;
  reg [1-1:0] M_gamethreeplayerone_start;
  reg [1-1:0] M_gamethreeplayerone_correct;
  reg [1-1:0] M_gamethreeplayerone_nextround;
  reg [1-1:0] M_gamethreeplayerone_yes;
  reg [1-1:0] M_gamethreeplayerone_no;
  gamethreeplayer_63 gamethreeplayerone (
    .clk(clk),
    .rst(rst),
    .start(M_gamethreeplayerone_start),
    .correct(M_gamethreeplayerone_correct),
    .nextround(M_gamethreeplayerone_nextround),
    .yes(M_gamethreeplayerone_yes),
    .no(M_gamethreeplayerone_no),
    .playerinput(M_gamethreeplayerone_playerinput),
    .playerscore(M_gamethreeplayerone_playerscore)
  );
  wire [5-1:0] M_gamethreeplayertwo_playerinput;
  wire [8-1:0] M_gamethreeplayertwo_playerscore;
  reg [1-1:0] M_gamethreeplayertwo_start;
  reg [1-1:0] M_gamethreeplayertwo_correct;
  reg [1-1:0] M_gamethreeplayertwo_nextround;
  reg [1-1:0] M_gamethreeplayertwo_yes;
  reg [1-1:0] M_gamethreeplayertwo_no;
  gamethreeplayer_63 gamethreeplayertwo (
    .clk(clk),
    .rst(rst),
    .start(M_gamethreeplayertwo_start),
    .correct(M_gamethreeplayertwo_correct),
    .nextround(M_gamethreeplayertwo_nextround),
    .yes(M_gamethreeplayertwo_yes),
    .no(M_gamethreeplayertwo_no),
    .playerinput(M_gamethreeplayertwo_playerinput),
    .playerscore(M_gamethreeplayertwo_playerscore)
  );
  wire [5-1:0] M_gamethreeplayerthree_playerinput;
  wire [8-1:0] M_gamethreeplayerthree_playerscore;
  reg [1-1:0] M_gamethreeplayerthree_start;
  reg [1-1:0] M_gamethreeplayerthree_correct;
  reg [1-1:0] M_gamethreeplayerthree_nextround;
  reg [1-1:0] M_gamethreeplayerthree_yes;
  reg [1-1:0] M_gamethreeplayerthree_no;
  gamethreeplayer_63 gamethreeplayerthree (
    .clk(clk),
    .rst(rst),
    .start(M_gamethreeplayerthree_start),
    .correct(M_gamethreeplayerthree_correct),
    .nextround(M_gamethreeplayerthree_nextround),
    .yes(M_gamethreeplayerthree_yes),
    .no(M_gamethreeplayerthree_no),
    .playerinput(M_gamethreeplayerthree_playerinput),
    .playerscore(M_gamethreeplayerthree_playerscore)
  );
  wire [8-1:0] M_randomaccessctr_value;
  reg [1-1:0] M_randomaccessctr_upcounter;
  reg [1-1:0] M_randomaccessctr_start;
  conditionalcounter_66 randomaccessctr (
    .clk(clk),
    .rst(rst),
    .upcounter(M_randomaccessctr_upcounter),
    .start(M_randomaccessctr_start),
    .value(M_randomaccessctr_value)
  );
  wire [8-1:0] M_randomaccessctr2_value;
  reg [1-1:0] M_randomaccessctr2_upcounter;
  reg [1-1:0] M_randomaccessctr2_start;
  conditionalcounter_66 randomaccessctr2 (
    .clk(clk),
    .rst(rst),
    .upcounter(M_randomaccessctr2_upcounter),
    .start(M_randomaccessctr2_start),
    .value(M_randomaccessctr2_value)
  );
  
  wire [5-1:0] M_gamethreeanswerrom_answer;
  reg [7-1:0] M_gamethreeanswerrom_address;
  gamethreeanswerrom_68 gamethreeanswerrom (
    .address(M_gamethreeanswerrom_address),
    .answer(M_gamethreeanswerrom_answer)
  );
  
  wire [8-1:0] M_gamethreenumberrom_number;
  reg [7-1:0] M_gamethreenumberrom_address;
  gamethreenumberrom_69 gamethreenumberrom (
    .address(M_gamethreenumberrom_address),
    .number(M_gamethreenumberrom_number)
  );
  
  wire [1-1:0] M_gamethreecompareone_equal;
  reg [5-1:0] M_gamethreecompareone_romanswer;
  reg [5-1:0] M_gamethreecompareone_playerinput;
  gamethreecomparator_70 gamethreecompareone (
    .romanswer(M_gamethreecompareone_romanswer),
    .playerinput(M_gamethreecompareone_playerinput),
    .equal(M_gamethreecompareone_equal)
  );
  
  wire [1-1:0] M_gamethreecomparetwo_equal;
  reg [5-1:0] M_gamethreecomparetwo_romanswer;
  reg [5-1:0] M_gamethreecomparetwo_playerinput;
  gamethreecomparator_70 gamethreecomparetwo (
    .romanswer(M_gamethreecomparetwo_romanswer),
    .playerinput(M_gamethreecomparetwo_playerinput),
    .equal(M_gamethreecomparetwo_equal)
  );
  
  wire [1-1:0] M_gamethreecomparethree_equal;
  reg [5-1:0] M_gamethreecomparethree_romanswer;
  reg [5-1:0] M_gamethreecomparethree_playerinput;
  gamethreecomparator_70 gamethreecomparethree (
    .romanswer(M_gamethreecomparethree_romanswer),
    .playerinput(M_gamethreecomparethree_playerinput),
    .equal(M_gamethreecomparethree_equal)
  );
  
  always @* begin
    M_gamethreestate_d = M_gamethreestate_q;
    
    alufn = 6'h35;
    alub = 8'h0b;
    alua = M_roundcounter2_value;
    primeornot = 1'h0;
    M_gamethreeplayerone_yes = playerone[0+0-:1];
    M_gamethreeplayerone_no = playerone[1+0-:1];
    M_gamethreeplayertwo_yes = playertwo[0+0-:1];
    M_gamethreeplayertwo_no = playertwo[1+0-:1];
    M_gamethreeplayerthree_yes = playerthree[0+0-:1];
    M_gamethreeplayerthree_no = playerthree[1+0-:1];
    M_randomaccessctr_start = 1'h0;
    M_randomaccessctr_upcounter = 1'h1;
    M_randomaccessctr2_start = 1'h0;
    M_randomaccessctr2_upcounter = 1'h1;
    if (M_roundcounter2_value == 1'h0 || M_roundcounter2_value == 2'h2 || M_roundcounter2_value == 3'h4 || M_roundcounter2_value == 3'h6) begin
      M_gamethreeanswerrom_address = M_randomaccessctr_value[0+6-:7];
      M_gamethreenumberrom_address = M_randomaccessctr_value[0+6-:7];
    end else begin
      M_gamethreeanswerrom_address = M_randomaccessctr2_value[0+6-:7];
      M_gamethreenumberrom_address = M_randomaccessctr2_value[0+6-:7];
    end
    M_gamethreecompareone_romanswer = M_gamethreeanswerrom_answer;
    M_gamethreecomparetwo_romanswer = M_gamethreeanswerrom_answer;
    M_gamethreecomparethree_romanswer = M_gamethreeanswerrom_answer;
    M_gamethreecompareone_playerinput = M_gamethreeplayerone_playerinput;
    M_gamethreecomparetwo_playerinput = M_gamethreeplayertwo_playerinput;
    M_gamethreecomparethree_playerinput = M_gamethreeplayerthree_playerinput;
    M_countdowntimer2_start = 1'h0;
    M_inputcountdowntimer2_start = 1'h0;
    M_roundcounter2_start = 1'h0;
    M_roundcounter2_upcounter = 1'h0;
    M_gamethreeplayerone_start = 1'h0;
    M_gamethreeplayerone_correct = 1'h0;
    M_gamethreeplayertwo_start = 1'h0;
    M_gamethreeplayertwo_correct = 1'h0;
    M_gamethreeplayerthree_start = 1'h0;
    M_gamethreeplayerthree_correct = 1'h0;
    M_gamethreeplayerone_nextround = 1'h0;
    M_gamethreeplayertwo_nextround = 1'h0;
    M_gamethreeplayerthree_nextround = 1'h0;
    playeronescore = M_gamethreeplayerone_playerscore;
    playertwoscore = M_gamethreeplayertwo_playerscore;
    playerthreescore = M_gamethreeplayerthree_playerscore;
    if (start) begin
      M_countdowntimer2_start = 1'h1;
      M_roundcounter2_start = 1'h1;
      M_gamethreeplayerone_start = 1'h1;
      M_gamethreeplayertwo_start = 1'h1;
      M_gamethreeplayerthree_start = 1'h1;
      M_gamethreestate_d = STARTCOUNTDOWN_gamethreestate;
    end
    
    case (M_gamethreestate_q)
      STARTCOUNTDOWN_gamethreestate: begin
        primeornot = M_countdowntimer2_value;
        if (M_countdowntimer2_timerdone) begin
          M_gamethreestate_d = USERINPUT_gamethreestate;
          M_inputcountdowntimer2_start = 1'h1;
          M_gamethreeplayerone_nextround = 1'h1;
          M_gamethreeplayertwo_nextround = 1'h1;
          M_gamethreeplayerthree_nextround = 1'h1;
        end
      end
      USERINPUT_gamethreestate: begin
        primeornot = M_gamethreenumberrom_number;
        if (M_roundcounter2_value == 1'h0 || M_roundcounter2_value == 2'h2 || M_roundcounter2_value == 3'h4 || M_roundcounter2_value == 3'h6) begin
          M_randomaccessctr_upcounter = 1'h0;
        end else begin
          M_randomaccessctr2_upcounter = 1'h0;
        end
        if (M_inputcountdowntimer2_timerdone) begin
          M_countdowntimer2_start = 1'h1;
          M_gamethreestate_d = SHOWSCORE_gamethreestate;
        end
        if (M_gamethreecompareone_equal) begin
          M_gamethreeplayerone_correct = 1'h1;
          M_countdowntimer2_start = 1'h1;
          M_gamethreestate_d = SHOWSCORE_gamethreestate;
        end
        if (M_gamethreecomparetwo_equal) begin
          M_gamethreeplayertwo_correct = 1'h1;
          M_countdowntimer2_start = 1'h1;
          M_gamethreestate_d = SHOWSCORE_gamethreestate;
        end
        if (M_gamethreecomparethree_equal) begin
          M_gamethreeplayerthree_correct = 1'h1;
          M_countdowntimer2_start = 1'h1;
          M_gamethreestate_d = SHOWSCORE_gamethreestate;
        end
      end
      SHOWSCORE_gamethreestate: begin
        primeornot = 1'h0;
        if (M_countdowntimer2_timerdone && aluout) begin
          M_countdowntimer2_start = 1'h1;
          M_roundcounter2_upcounter = 1'h1;
          M_gamethreestate_d = STARTCOUNTDOWN_gamethreestate;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_gamethreestate_q <= 1'h0;
    end else begin
      M_gamethreestate_q <= M_gamethreestate_d;
    end
  end
  
endmodule
