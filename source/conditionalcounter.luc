module conditionalcounter #(                 // This counter is similar to the normal counter but with the addition of two features
                                             // It can reset upon given a "start" signal and only increments if given an "upcounter" signal
    SIZE = 8 : SIZE > 0, // Width of the output
    DIV = 0  : DIV >= 0, // number of bits to use as divisor
    TOP = 0  : TOP >= 0, // max value, 0 = none
    
    // direction to count, use 1 for up and 0 for down
    UP = 1 : UP == 1 || UP == 0
  )(
    input clk,
    input rst,
    input upcounter,
    input start,
    output value[SIZE]
  ) {
  
  .clk(clk), .rst(rst) {
    dff ctr[SIZE+DIV];
  }
  
  const MAX_VALUE = c{TOP, DIVx{1}}; // value when maxed out
  
  always {
    value = ctr.q[SIZE+DIV-1-:SIZE]; // set the output
    
    if (UP && upcounter) { // when this is an up counter
      ctr.d = ctr.q + 1; // increase
      if (TOP != 0 && ctr.q == MAX_VALUE) { // reached the top?
        ctr.d = 0; // reset
      }
    }
    if (start) {    // reset if start signal is given
      ctr.d = 0;
    } 
  }
}