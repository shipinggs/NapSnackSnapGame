module countdowntimer #(  // THIS COUNTDOWNTIMER IS HARDCODED TO START AT 5 AND TO WORK AT A CERTAIN RATE.

    SIZE = 3 : SIZE > 0, // Width of the output
    DIV = 0  : DIV >= 0, // number of bits to use as divisor
    BOTTOM = 0  : BOTTOM >= 0, // min value, 
    
    // direction to count, use 1 for up and 0 for down
    UP = 0 : UP == 1 || UP == 0
  )(
    input clk,
    input rst,
    input start,            // Similar to the conditionalcounter, this timer resets when given a "start" digital high.
    output timerdone,       // This output signal tells the parent module whether the countdown is complete.
    output value[3]
  ) {
  
  .clk(clk), .rst(rst) {
    dff ctr[28] (#INIT(28hbffffff));      // the first 3 (see output value) digits of this hex number is binary 101 --> 5: our desired start count.
  }
  
  const MIN_VALUE = c{BOTTOM, DIVx{1}}; // value when at minimum
  
  always {
    timerdone = 0;
    value = ctr.q[SIZE+DIV-1-:SIZE]; // set the output
    
    
    if (!UP) { // when this is a down counter
      ctr.d = ctr.q - 1; // decrease
      if (ctr.q == MIN_VALUE) { // reached zero?
        ctr.d = 28hbffffff;
        timerdone = 1;    // Tells the parent module that the countdown is complete.
      }      
    }
    
    if (start) {
      ctr.d = 28hbffffff;
    }
  }
}