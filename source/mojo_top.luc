module mojo_top (
    input clk,                     // 50MHz clock
    input rst_n,                   // reset button (active low)
    input gameselectbuttons[3],    // For selecting which game to play (NAP, SNAP, or SNACK?)
    input playeronebuttons[3],     // 9 x player button inputs
    input playertwobuttons[3],
    input playerthreebuttons[3],
    output centralleds[3],         // For the central RGB leds
    output centralsevensegzero[8], // Right-most central sevenseg
    output centralsevensegone[8],  // Middle central sevenseg
    output centralsevensegtwo[8],  // Left-most central sevenseg
    output playeronescore[8],      // Player one score sevenseg
    output playertwoscore[8],      // Player two score sevenseg
    output playerthreescore[8],    // Player three score sevenseg
    output playerleds[6]           // For displaying Red or Green led for each player
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner bconeone;        // oneone represents player one button one (RED)
    button_conditioner bconetwo;        // onetwo represents player one button two (GREEN)
    button_conditioner bconethree;      // onethree represents player one button three (BLUE)
    button_conditioner bctwoone;        // and so on
    button_conditioner bctwotwo;
    button_conditioner bctwothree;
    button_conditioner bcthreeone;
    button_conditioner bcthreetwo;
    button_conditioner bcthreethree;
    button_conditioner bcgameselectone;
    button_conditioner bcgameselecttwo;
    button_conditioner bcgameselectthree;
    
    edge_detector edoneone (#FALL(0));    // We need all these button_conditioners and edge_detectors to have clean button inputs
    edge_detector edonetwo (#FALL(0));
    edge_detector edonethree (#FALL(0));
    edge_detector edtwoone (#FALL(0));
    edge_detector edtwotwo (#FALL(0));
    edge_detector edtwothree (#FALL(0));
    edge_detector edthreeone (#FALL(0));
    edge_detector edthreetwo (#FALL(0));
    edge_detector edthreethree (#FALL(0));
    edge_detector edgameselectone (#FALL(0));
    edge_detector edgameselecttwo (#FALL(0));
    edge_detector edgameselectthree (#FALL(0)); 

  }
  
  .clk(clk), .rst(rst) {
    fsm gameselectstate = {IDLE, NAP, SNACK, SNAP};  // 4 MAIN states at mojo_top: START(IDLE), GAMEONE, GAMETWO, GAMETHREE
    
    gameonemanager gameonemanager;                   // instantiating gameonemanager for managing game one processes  
    gametwomanager gametwomanager;                   // and similarly for game two
    gamethreemanager gamethreemanager;               // and game three
  }
  
  alu8bit alu8bit;                                    // ALU MODULE

  decimaltosevenseg decimaltosevenseg;                // for central sevenseg display
  decimaltosevenseg playeronedecimaltosevenseg;       // for player one score sevenseg
  decimaltosevenseg playertwodecimaltosevenseg;       // and so on
  decimaltosevenseg playerthreedecimaltosevenseg;
  
  sevenseg sevensegzero;                              // for central sevenseg display
  sevenseg sevensegone;
  sevenseg sevensegtwo;
  sevenseg playeronescoresevenseg;                    // for player score sevenseg displays
  sevenseg playertwoscoresevenseg;
  sevenseg playerthreescoresevenseg;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    centralleds = 3b0;      // Turn central RGB leds off by default.
    
    alu8bit.alufn = 0;
    alu8bit.a = 0;
    alu8bit.b = 0;
    
    gameonemanager.aluout = alu8bit.aluout;        // Conntecting game one to ALU
    gametwomanager.aluout = alu8bit.aluout;        // Game two to ALU
    gamethreemanager.aluout = alu8bit.aluout;      // Game three to ALU
    
    gameonemanager.start = 0;
    gametwomanager.start = 0;
    gamethreemanager.start = 0;
    
    
    bconeone.in = playeronebuttons[0];                 // This is just a series of connecting button_conditioners 
    edoneone.in = bconeone.out;                        // to edge_detectors to output signals
    gametwomanager.playerone[0] = edoneone.out;        // ADD HERE other output signals for other games.
    gameonemanager.playeronebuttons[0] = edoneone.out;
    gamethreemanager.playerone[0] = edoneone.out;
    
    bconetwo.in = playeronebuttons[1];                // These three buttons ("playeronebuttons") are for player one
    edonetwo.in = bconetwo.out;
    gametwomanager.playerone[1] = edonetwo.out;
    gameonemanager.playeronebuttons[1] = edonetwo.out; 
    
    bconethree.in = playeronebuttons[2];
    edonethree.in = bconethree.out;
    gametwomanager.playerone[2] = edonethree.out;
    gameonemanager.playeronebuttons[2] = edonethree.out;
    gamethreemanager.playerone[1] = edonethree.out;
    
    bctwoone.in = playertwobuttons[0];                  // These are for player two
    edtwoone.in = bctwoone.out;
    gametwomanager.playertwo[0] = edtwoone.out;
    gameonemanager.playertwobuttons[0] = edtwoone.out;
    gamethreemanager.playertwo[0] = edtwoone.out;
    
    bctwotwo.in = playertwobuttons[1];                        
    edtwotwo.in = bctwotwo.out;
    gametwomanager.playertwo[1] = edtwotwo.out;
    gameonemanager.playertwobuttons[1] = edtwotwo.out;
    
    bctwothree.in = playertwobuttons[2];
    edtwothree.in = bctwothree.out;
    gametwomanager.playertwo[2] = edtwothree.out;
    gameonemanager.playertwobuttons[2] = edtwothree.out;
    gamethreemanager.playertwo[1] = edtwothree.out;
    
    bcthreeone.in = playerthreebuttons[0];               // These are for player three
    edthreeone.in = bcthreeone.out;
    gametwomanager.playerthree[0] = edthreeone.out;
    gameonemanager.playerthreebuttons[0] = edthreeone.out;
    gamethreemanager.playerthree[0] = edthreeone.out;
    
    bcthreetwo.in = playerthreebuttons[1];                       
    edthreetwo.in = bcthreetwo.out;
    gametwomanager.playerthree[1] = edthreetwo.out;
    gameonemanager.playerthreebuttons[1] = edthreetwo.out;
    
    bcthreethree.in = playerthreebuttons[2];
    edthreethree.in = bcthreethree.out;
    gametwomanager.playerthree[2] = edthreethree.out;
    gameonemanager.playerthreebuttons[2] = edthreethree.out;
    gamethreemanager.playerthree[1] = edthreethree.out;
    
    bcgameselectone.in = gameselectbuttons[0];          // These are for the game selection buttons
    edgameselectone.in = bcgameselectone.out;
    
    bcgameselecttwo.in = gameselectbuttons[1];
    edgameselecttwo.in = bcgameselecttwo.out;
    
    bcgameselectthree.in = gameselectbuttons[2];
    edgameselectthree.in = bcgameselectthree.out;
    
    decimaltosevenseg.a = 0;              // default seven seg is 0000.
    playeronedecimaltosevenseg.a = 0;
    playertwodecimaltosevenseg.a = 0;
    playerthreedecimaltosevenseg.a = 0;
    
    playerleds = 6b0;                     // Turn player R/G leds off by default
    
    if (edgameselectone.out) {                           // This button will be changed to the gameselectbuttons. add BC and ED.
      gameselectstate.d = gameselectstate.NAP;           // Change current game to NAP (Game One)
      gameonemanager.start = 1;
    }
    
    if (edgameselectthree.out) {                         // ADD HERE other state select buttons
      gameselectstate.d = gameselectstate.SNACK;         // Change current game to SNACK (Game Two)
      gametwomanager.start = 1;                          // initialize game two. Restart game two's counter
    }
    
    if (edgameselecttwo.out) {                           // ADD HERE other state select buttons
      gameselectstate.d = gameselectstate.SNAP;          // Change current game to SNAP (Game Three)
      gamethreemanager.start = 1;                        // initialize game three. Restart game three's counter
    }
    
    case(gameselectstate.q){
    
      gameselectstate.NAP:
        alu8bit.alufn = gameonemanager.alufn;                        // SUB operation
        alu8bit.a = gameonemanager.alua;                             // if gameselectstate is in NAP, set alu inputs to be from gameonemanager
        alu8bit.b = gameonemanager.alub;
        playerleds[1:0] = gameonemanager.playerleds[1:0];            // Connecting appropriate outputs for game to mojo_top
        playerleds[3:2] = gameonemanager.playerleds[3:2];            // No need to show player scores for game one
        playerleds[5:4] = gameonemanager.playerleds[5:4];
        decimaltosevenseg.a = gameonemanager.centralsevenseg;
      
      gameselectstate.SNACK:
        alu8bit.alufn = gametwomanager.alufn;                        // CMPLT operation
        alu8bit.a = gametwomanager.alua;
        alu8bit.b = gametwomanager.alub;
        playerthreedecimaltosevenseg.a = gametwomanager.playerthreescore;
        playertwodecimaltosevenseg.a = gametwomanager.playertwoscore;
        playeronedecimaltosevenseg.a = gametwomanager.playeronescore;
        decimaltosevenseg.a = gametwomanager.countdownvalue;
        centralleds = gametwomanager.leddisplay;

      gameselectstate.SNAP:
        alu8bit.alufn = gamethreemanager.alufn;                      // CMPLT operation
        alu8bit.a = gamethreemanager.alua;
        alu8bit.b = gamethreemanager.alub;
        playerthreedecimaltosevenseg.a = gamethreemanager.playerthreescore;
        playertwodecimaltosevenseg.a = gamethreemanager.playertwoscore;
        playeronedecimaltosevenseg.a = gamethreemanager.playeronescore;
        decimaltosevenseg.a = gamethreemanager.primeornot;
        
    }
    
    
    sevensegzero.char = decimaltosevenseg.out0; // default few lines to map decimal to sevenseg.
    sevensegone.char = decimaltosevenseg.out1;
    sevensegtwo.char = decimaltosevenseg.out2;
    
    playeronescoresevenseg.char = playeronedecimaltosevenseg.out0;      // only out0 is needed
    playertwoscoresevenseg.char = playertwodecimaltosevenseg.out0;      // since player scores are only 0-8 (8 rounds for games two and three)
    playerthreescoresevenseg.char = playerthreedecimaltosevenseg.out0;    
    
    centralsevensegzero = ~sevensegzero.segs;            // this is for right-most central sevenseg
    centralsevensegone = ~sevensegone.segs;              // middle central sevenseg
    centralsevensegtwo = ~sevensegtwo.segs;              // left-most central sevenseg
    
    playeronescore = ~playeronescoresevenseg.segs;       // player scores sevenseg outputs
    playertwoscore = ~playertwoscoresevenseg.segs;
    playerthreescore = ~playerthreescoresevenseg.segs;
    
    if (gameselectstate.q == gameselectstate.NAP) {      // NAP game should not show player scores
      playeronescore = ~8b0;
      playertwoscore = ~8b0;
      playerthreescore = ~8b0;
    }
    
   
  }
}