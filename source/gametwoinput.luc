module gametwoinput #(
    SIZE = 30 : SIZE > 0, // Width of the output
    DIV = 0  : DIV >= 0, // number of bits to use as divisor
    TOP = 0  : TOP >= 0 // max value, 0 = none
    
  )(
    input clk,
    input rst,
    input start,           // "start" signal to reset player's input
    input red,             // red, green, blue button inputs
    input green,
    input blue,
    input pressnumber[4],  // This is the input from a counter that keeps track of the number of times the player has pressed a button
    output response[30]    // 30-bit response to encode a 10-blink sequence
  ) {
  
  .clk(clk), .rst(rst) {
    dff ctr[30];
  }
    
  always {
    response = ctr.q[SIZE-1:0];   // set the output
    
    case (pressnumber) {          // at every next press, the pointers should shift left by 1
    
      0:                                            // At case 0, i.e. no presses made yet.
        if (red) {
          ctr.d = ctr.q + 30b1;                     // If red is pressed, add LSB by 1
        }
        if (green) {
          ctr.d = ctr.q + 30b10000000000;           // If green is pressed, add LSB for GREEN (10-bits left displacement of 10) by 1
        }
        if (blue) {
          ctr.d = ctr.q + 30b100000000000000000000; // If blue is pressed, add LSB for BLUE (another 10-bits left displacement of 10) by 1
        }

      1:                                            // At the next press,
        if (red) {                                  
          ctr.d = ctr.q + 30b10;                    // If red is pressed, we now add bit 1 by 1
        }
        if (green) {
          ctr.d = ctr.q + 30b100000000000;          // If green is pressed, we now add GREEN's bit 1 by 1
        }
        if (blue) {
          ctr.d = ctr.q + 30b1000000000000000000000; // If blue is pressed, we now add BLUE's bit 1 by 1
        }

      2:
        if (red) {  
          ctr.d = ctr.q + 30b100;                       // We now add RED's bit 2 by 1
        }
        if (green) {
          ctr.d = ctr.q + 30b1000000000000;             // add GREEN's bit 2 by 1
        }
        if (blue) {
          ctr.d = ctr.q + 30b10000000000000000000000;   // add BLUE's bit 2 by 1
        }

      3:
        if (red) {
          ctr.d = ctr.q + 30b1000;                      // and so on
        } 
        if (green) {
          ctr.d = ctr.q + 30b10000000000000;
        }
        if (blue) {
          ctr.d = ctr.q + 30b100000000000000000000000; 
        }

      4: 
        if (red) {
          ctr.d = ctr.q + 30b10000;
        }
        if (green) {
          ctr.d = ctr.q + 30b100000000000000;
        }
        if (blue) {
          ctr.d = ctr.q + 30b1000000000000000000000000; 
        }

      5:
        if (red) {
          ctr.d = ctr.q + 30b100000;
        }
        if (green) {
          ctr.d = ctr.q + 30b1000000000000000;
        }
        if (blue) {
          ctr.d = ctr.q + 30b10000000000000000000000000; 
        }
      
      6:
        if (red) {
          ctr.d = ctr.q + 30b1000000;
        }
        if (green) {
          ctr.d = ctr.q + 30b10000000000000000;
        }
        if (blue) {
          ctr.d = ctr.q + 30b100000000000000000000000000; 
        }

      7:
        if (red) {
          ctr.d = ctr.q + 30b10000000;
        }
        if (green) {
          ctr.d = ctr.q + 30b100000000000000000;
        }
        if (blue) {
          ctr.d = ctr.q + 30b1000000000000000000000000000; 
        }

      8:
        if (red) {
          ctr.d = ctr.q + 30b100000000;
        }
        if (green) {
          ctr.d = ctr.q + 30b1000000000000000000;
        }
        if (blue) {
          ctr.d = ctr.q + 30b10000000000000000000000000000;
        }

      9:                                                // Case 9 because maximum number of relevant presses is 10.
        if (red) {
          ctr.d = ctr.q + 30b1000000000;
        }
        if (green) {
          ctr.d = ctr.q + 30b10000000000000000000;
        }
        if (blue) {
          ctr.d = ctr.q + 30b100000000000000000000000000000; 
        }

    }
    
    if (start) {
      ctr.d = 30b0;            // if "start" signal given upon start of next round, reset input tracker to 30b0. Clean slate.
    }
  }
}